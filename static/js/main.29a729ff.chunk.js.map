{"version":3,"sources":["Components/PokemonCard.js","Components/Home.js","Components/MyPokemon.js","Components/PokemonDetail.js","Assets/pokeball.png","Components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["PokemonCard","props","history","useHistory","clickAction","pokemonName","push","pathname","state","pokemon","data","map","pokeData","dataIndex","pokemonNum","ownPokemon","name","length","Col","xs","sm","md","lg","Card","className","CardImg","top","width","src","image","alt","onClick","CardBody","CardTitle","tag","CardText","showName","pokeName","pokeIndex","releasePokemon","substring","queryPokemonList","gql","gqlVariables","limit","offset","Home","useQuery","variables","loading","error","Spinner","color","children","pokemonList","pokemons","results","localPokemon","JSON","parse","localStorage","getItem","myPokemon","i","Row","MyPokemon","useState","modalReleaseOpen","setModalReleaseOpen","releasedPokemon","setReleasedPokemon","setOwnPokemon","toggleModalRelease","Modal","isOpen","toggle","backdrop","ModalHeader","ModalBody","ModalFooter","Button","cloneOwnPokemon","stringify","filter","Object","keys","removeItem","setItem","queryPokemon","PokemonInfo","pokemonData","sprites","front_default","successCatch","Math","random","setCaughtPokemon","toggleModalCatch","toggleModalFailed","tryCatch","types","e","type","Table","striped","colSpan","moves","move","PokemonDetail","location","useLocation","modalCatchOpen","setModalCatchOpen","modalFailedOpen","setModalFailedOpen","caughtPokemon","caughtName","setCaughtName","value","onChange","target","pokemonObj","isUnique","values","forEach","val","includes","alert","to","NavbarLayout","setIsOpen","closeNavbar","homeHref","window","hostname","Navbar","light","expand","NavbarBrand","href","pokeball","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","Link","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"0VAkDeA,EA9CK,SAACC,GACjB,IAAMC,EAAUC,cAEVC,EAAc,SAACC,GACjBH,EAAQI,KAAK,CACTC,SAAU,UACVC,MAAO,CAAEC,QAASJ,MAI1B,OAAOJ,EAAMS,KAAKC,KAAI,SAACC,EAAUC,GAC7B,IAAIC,EAAa,EAMjB,OAJIb,EAAMc,aACND,EAAab,EAAMc,WAAWH,EAASI,MAAQf,EAAMc,WAAWH,EAASI,MAAMC,OAAS,GAIxF,cAACC,EAAA,EAAD,CAA+BC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAvD,SACI,eAACC,EAAA,EAAD,CAAMC,UAAU,eAAhB,UACI,cAACC,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAKhB,EAASiB,MAAOC,IAAKlB,EAASI,KAAO,OAAQe,QAAS,kBAAM3B,EAAYQ,EAASI,SAChH,eAACgB,EAAA,EAAD,CAAUD,QAAS,kBAAM3B,EAAYQ,EAASI,OAA9C,UACI,cAACiB,EAAA,EAAD,CAAWC,IAAI,KAAf,SAAqBtB,EAASI,OAC9B,eAACmB,EAAA,EAAD,uBAAoBrB,QAEvBb,EAAMmC,UACHnC,EAAMc,WAAWH,EAASI,MAAML,KAAI,SAAC0B,EAAUC,GAC3C,OACI,sBAAiCP,QAAS,kBAAM9B,EAAMsC,eAAe3B,EAASI,KAAMqB,IAAWb,UAAU,yDAAzG,UACI,sCACQa,EAASpB,OAAS,GAAKoB,EAASG,UAAU,EAAG,IAAM,MAAQH,EADnE,OAGA,qBAAKb,UAAU,gCAAf,SACI,qBAAKA,UAAU,gBAAf,4BALE,UAAYc,MAWlC,qBAAKd,UAAU,aArBb,QAAUX,OChB1B4B,EAAmBC,YAAH,iRAiBhBC,EAAe,CACnBC,MAAO,IACPC,OAAQ,GAmCKC,EAhCF,WACX,MAAiCC,YAASN,EAAkB,CAC1DO,UAAWL,IADLM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOxC,EAAxB,EAAwBA,KAIxB,GAAIuC,EAAS,OAAQ,gCAAK,cAACE,EAAA,EAAD,CAASC,MAAM,UAAUC,SAAS,KAAI,qEAChE,GAAIH,EAAO,OAAO,iGAElB,IAAMI,EAAc5C,EAAK6C,SAASC,QAE9BC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,gBACnDJ,EAAeA,IAA8B,EAG7C,IADA,IAAIK,EAAY,GACRC,EAAE,EAAGA,EAAET,EAAYrC,OAAQ8C,IAAI,CACnC,IAAI1D,EAAciD,EAAYS,GAAG/C,OACrByC,EAAapD,IAAeoD,EAAapD,GAAaY,OAAS,GAGvE6C,EAAUxD,KAAKgD,EAAYS,IAInC,OACE,qBAAKvC,UAAU,iBAAf,SACE,cAACwC,EAAA,EAAD,CAAKxC,UAAU,gBAAf,SACE,cAAC,EAAD,CAAad,KAAM4C,EAAavC,WAAY0C,S,qDChD9ChB,EAAmBC,YAAH,iRAiBhBC,EAAe,CACjBC,MAAO,IACPC,OAAQ,GAwFGoB,EArFG,WACd,IAAIR,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,gBACnDJ,EAAeA,IAA8B,EAE7C,MAAgDS,oBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAA8CF,mBAAS,CAAC,GAAI,KAA5D,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAoCJ,mBAAST,GAA7C,mBAAO1C,EAAP,KAAmBwD,EAAnB,KAEMC,EAAqB,kBAAMJ,GAAqBD,IA6BtD,EAAiCpB,YAASN,EAAkB,CACxDO,UAAWL,IADPM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOxC,EAAxB,EAAwBA,KAIxB,GAAIuC,EAAS,OAAQ,gCAAK,cAACE,EAAA,EAAD,CAASC,MAAM,UAAUC,SAAS,KAAI,qEAChE,GAAIH,EAAO,OAAO,iGAKlB,IAHA,IAAMI,EAAc5C,EAAK6C,SAASC,QAE9BM,EAAY,GACRC,EAAE,EAAGA,EAAET,EAAYrC,OAAQ8C,IAAI,CACnC,IAAI1D,EAAciD,EAAYS,GAAG/C,OACrBD,EAAWV,IAAeU,EAAWV,GAAaY,OAAS,GAGnE6C,EAAUxD,KAAKgD,EAAYS,IAInC,OACI,sBAAKvC,UAAU,iBAAf,UACI,4CACCT,EACG,cAACiD,EAAA,EAAD,CAAKxC,UAAU,gBAAf,SACI,cAAC,EAAD,CACId,KAAMoD,EACN/C,WAAYA,EACZqB,UAAU,EACVG,eAvDG,SAAC9B,EAAS4B,GAC7BiC,EAAmB,CAAC7D,EAAS4B,IAC7BmC,SAyDQ,uFAEJ,eAACC,EAAA,EAAD,CAAOC,OAAQP,EAAkBQ,OAAQH,EAAoBI,SAAU,SAAvE,UACI,cAACC,EAAA,EAAD,sBACA,cAACC,EAAA,EAAD,UACI,0DAA4B,4BAAIT,EAAgB,KAAhD,kBAEJ,eAACU,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQ5B,MAAM,SAASrB,QA9DnB,WAChB,IAAItB,EAAU4D,EAAgB,GAC1BhC,EAAWgC,EAAgB,GAE3BY,EAAkBvB,KAAKC,MAAMD,KAAKwB,UAAUnE,IAChDkE,EAAgBxE,GAAWwE,EAAgBxE,GAAS0E,QAAO,SAAAnE,GAAI,OAAIA,IAASqB,KAEtC,GAAnC4C,EAAgBxE,GAASQ,eACjBgE,EAAgBxE,GAGe,GAAvC2E,OAAOC,KAAKJ,GAAiBhE,QAC5B2C,aAAa0B,WAAW,eACxBf,GAAc,KAEdX,aAAa2B,QAAQ,cAAe7B,KAAKwB,UAAUD,IACnDV,EAAcU,IAGlBT,KA2CY,qBACA,cAACQ,EAAA,EAAD,CAAQ5B,MAAM,UAAUrB,QAASyC,EAAjC,8B,iBCrGdgB,EAAe9C,YAAH,4aA0GZ+C,EAAc,SAACxF,GACjB,IAAM0C,EAAe,CACjB3B,KAAMf,EAAMI,aAGhB,EAAiC0C,YAASyC,EAAc,CACpDxC,UAAWL,IADPM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOxC,EAAxB,EAAwBA,KAIxB,GAAIuC,EAAS,OAAQ,gCAAK,cAACE,EAAA,EAAD,CAASC,MAAM,UAAUC,SAAS,KAAI,qEAChE,GAAIH,EAAO,OAAO,iGAElB,IAAMwC,EAAchF,EAAKD,QAazB,OACI,eAACuD,EAAA,EAAD,CAAKxC,UAAU,cAAf,UACI,eAACN,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAhB,UACI,8BACI,qBAAKQ,IAAK8D,EAAYC,QAAQC,cAAe9D,IAAI,mBAErD,qBAAKN,UAAU,OAAf,SACI,cAACwD,EAAA,EAAD,CAAQ5B,MAAM,UAAUrB,QAAS,kBAlBhC,SAACtB,GACd,IAAIoF,EAAeC,KAAKC,SAAW,GACnC9F,EAAM+F,iBAAiBvF,GAEnBoF,EACA5F,EAAMgG,mBAENhG,EAAMiG,oBAWyCC,CAAST,EAAY1E,OAA5D,sCAGR,cAACE,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAhB,SACI,sBAAKI,UAAU,kBAAf,UACI,cAACwC,EAAA,EAAD,UACI,4BAAI0B,EAAY1E,SAEpB,cAACgD,EAAA,EAAD,CAAKxC,UAAU,OAAf,SAEQkE,EAAYU,MAAMzF,KAAI,SAAC0F,EAAGtC,GACtB,OACI,cAAC7C,EAAA,EAAD,CAA4BM,UAAU,gCAAtC,SACI,qBAAKA,UAAW,gCAAkC6E,EAAEC,KAAKtF,KAAzD,SACKqF,EAAEC,KAAKtF,QAFN,aAAe+C,QASzC,cAACC,EAAA,EAAD,UACI,qBAAKxC,UAAU,oBAAf,SACI,eAAC+E,EAAA,EAAD,CAAOC,SAAO,EAAd,UACI,gCACI,6BACI,oBAAIC,QAAQ,IAAZ,0BAGR,gCAEQf,EAAYgB,MAAM/F,KAAI,SAAC0F,EAAGtC,GACtB,GAAS,GAALA,GAAUA,EAAI,GAAK,EACnB,OAAI2B,EAAYgB,MAAM3C,EAAI,GAElB,+BACI,6BAAK2B,EAAYgB,MAAM3C,GAAG4C,KAAK3F,OAC/B,6BAAK0E,EAAYgB,MAAM3C,EAAI,GAAG4C,KAAK3F,SAF9B,aAAe+C,GAOxB,6BACI,oBAAI0C,QAAQ,IAAZ,SAAiBf,EAAYgB,MAAM3C,GAAG4C,KAAK3F,QADtC,aAAe+C,wBAkBjE6C,EAhLO,SAAC3G,GACnB,IAAM4G,EAAWC,cAEjB,EAA4C5C,oBAAS,GAArD,mBAAO6C,EAAP,KAAuBC,EAAvB,KACA,EAA8C9C,oBAAS,GAAvD,mBAAO+C,EAAP,KAAwBC,EAAxB,KACA,EAA0ChD,mBAAS,IAAnD,mBAAOiD,EAAP,KAAsBnB,EAAtB,KACA,EAAoC9B,mBAAS,IAA7C,mBAAOkD,EAAP,KAAmBC,EAAnB,KAEMpB,EAAmB,kBAAMe,GAAmBD,IAC5Cb,EAAoB,kBAAMgB,GAAoBD,IA+BpD,OAAKJ,EAASrG,MAKN,sBAAKgB,UAAU,mBAAf,UACI,gDACA,cAAC,EAAD,CACInB,YAAawG,EAASrG,MAAMC,QAC5BwF,iBAAkBA,EAClBC,kBAAmBA,EACnBF,iBAAkBA,IAEtB,eAACvB,EAAA,EAAD,CAAOC,OAAQqC,EAAgBpC,OAAQsB,EAAkBrB,SAAU,SAAnE,UACI,cAACC,EAAA,EAAD,sBACA,eAACC,EAAA,EAAD,WACI,2DAA6B,4BAAIqC,OACjC,8DACA,uBACIb,KAAK,OACLgB,MAAOF,EACPG,SAAU,SAAAlB,GAAC,OAAIgB,EAAchB,EAAEmB,OAAOF,aAG9C,eAACvC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQ5B,MAAM,UAAUrB,QAtDxB,WAChB,IAAI0B,EAAeG,aAAaC,QAAQ,eACpC4D,EAAa,GACbC,GAAW,EAEXjE,IACAgE,EAAa/D,KAAKC,MAAMF,IAER0D,KACZM,EAAWN,GAAiB,IAGhC/B,OAAOuC,OAAOF,GAAYG,SAAQ,SAAAC,GAAYA,EAAIC,SAASV,KAAaM,GAAW,MAEnFD,EAAWN,GAAe7G,KAAK8G,IAE/BK,EAAU,eAAMN,EAAgB,CAACC,IAGlCM,GACC9D,aAAa2B,QAAQ,cAAe7B,KAAKwB,UAAUuC,IAEnDJ,EAAc,IACdpB,KAEA8B,MAAM,qCAAuCX,EAAa,kCA6B9C,kBAA4D,IAC5D,cAACpC,EAAA,EAAD,CAAQ5B,MAAM,SAASrB,QAASkE,EAAhC,2BAGR,eAACxB,EAAA,EAAD,CAAOC,OAAQuC,EAAiBtC,OAAQuB,EAAmBtB,SAAU,SAArE,UACI,cAACC,EAAA,EAAD,qBACA,eAACC,EAAA,EAAD,WACI,iDAAmB,4BAAIqC,OACvB,8DAEJ,cAACpC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQ5B,MAAM,UAAUrB,QAASmE,EAAjC,4BAnChB6B,MAAM,uBACC,cAAC,IAAD,CAAUC,GAAG,Q,+DCrEb,MAA0B,qCCqC1BC,EA/BM,SAAChI,GAClB,MAA4BiE,oBAAS,GAArC,mBAAOQ,EAAP,KAAewD,EAAf,KAGMC,EAAc,kBAAMD,GAAU,IAEhCE,EAAuC,wBAA5BC,OAAOxB,SAASyB,SAAqC,gBAAkB,IAEtF,OACI,8BACI,eAACC,EAAA,EAAD,CAAQnF,MAAM,YAAYoF,OAAK,EAACC,OAAO,KAAKjH,UAAU,mBAAtD,UACI,eAACkH,EAAA,EAAD,CAAaC,KAAMP,EAAU5G,UAAU,kBAAvC,UACI,qBAAKI,IAAKgH,EAAU9G,IAAI,UAAUN,UAAU,cAC5C,qBAAKA,UAAU,oCAAf,wBAEJ,cAACqH,EAAA,EAAD,CAAe9G,QAZZ,kBAAMmG,GAAWxD,MAapB,cAACoE,EAAA,EAAD,CAAUpE,OAAQA,EAAQqE,QAAM,EAACvH,UAAU,uCAA3C,SACI,eAACwH,EAAA,EAAD,CAAKxH,UAAU,UAAUuH,QAAM,EAA/B,UACI,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAShH,IAAKiH,IAAMnB,GAAG,IAAIjG,QAASoG,EAAa3G,UAAU,cAA3D,4BAEJ,cAACyH,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAShH,IAAKiH,IAAMnB,GAAG,aAAajG,QAASoG,EAAa3G,UAAU,cAApE,qC,MCQb4H,MAvBf,WACE,OACE,qBAAK5H,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,qBAAKA,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6H,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,iBCfCC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCORQ,I,YAAS,IAAIC,IAAa,CAC9BC,IAAK,wCACLC,MAAO,IAAIC,OAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,GAAxB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,SAG1BlB,O","file":"static/js/main.29a729ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, Col } from 'reactstrap';\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst PokemonCard = (props) => {\r\n    const history = useHistory();\r\n\r\n    const clickAction = (pokemonName) => {\r\n        history.push({\r\n            pathname: '/detail',\r\n            state: { pokemon: pokemonName }\r\n        });\r\n    };\r\n\r\n    return props.data.map((pokeData, dataIndex) => {\r\n        var pokemonNum = 0;\r\n\r\n        if (props.ownPokemon) {\r\n            pokemonNum = props.ownPokemon[pokeData.name] ? props.ownPokemon[pokeData.name].length : 0;\r\n        }\r\n\r\n        return (\r\n            <Col key={\"poke_\" + dataIndex} xs=\"6\" sm=\"4\" md=\"3\" lg=\"2\">\r\n                <Card className=\"Card-Pokemon\">\r\n                    <CardImg top width=\"100%\" src={pokeData.image} alt={pokeData.name + \".png\"} onClick={() => clickAction(pokeData.name)} />\r\n                    <CardBody onClick={() => clickAction(pokeData.name)}>\r\n                        <CardTitle tag=\"h5\">{pokeData.name}</CardTitle>\r\n                        <CardText>You own: {pokemonNum}</CardText>\r\n                    </CardBody>\r\n                    {props.showName &&\r\n                        props.ownPokemon[pokeData.name].map((pokeName, pokeIndex) => {\r\n                            return (\r\n                                <div key={\"mypoke_\" + pokeIndex} onClick={() => props.releasePokemon(pokeData.name, pokeName)} className=\"d-flex justify-content-between mb-1 mx-2 border-bottom\">\r\n                                    <div>\r\n                                        - \"{pokeName.length > 10 ? pokeName.substring(0, 10) + \"...\" : pokeName}\"\r\n                                    </div>\r\n                                    <div className=\"d-flex justify-content-center\">\r\n                                        <div className=\"Card-Menu-Dot\">&nbsp;&#10247;</div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    <div className=\"mb-3\"></div>\r\n                </Card>\r\n            </Col>\r\n        )\r\n    })\r\n}\r\n\r\nexport default PokemonCard;","import React from 'react';\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { Row, Spinner } from 'reactstrap';\r\n\r\nimport PokemonCard from '../Components/PokemonCard';\r\n\r\nconst queryPokemonList = gql`\r\n  query pokemons($limit: Int, $offset: Int) {\r\n    pokemons(limit: $limit, offset: $offset) {\r\n      count\r\n      next\r\n      previous\r\n      status\r\n      message\r\n      results {\r\n        url\r\n        name\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst gqlVariables = {\r\n  limit: 151,\r\n  offset: 0,\r\n};\r\n\r\nconst Home = () => {\r\n  const { loading, error, data } = useQuery(queryPokemonList, {\r\n    variables: gqlVariables,\r\n  });\r\n  \r\n  if (loading) return (<div><Spinner color=\"primary\" children=\"\"/><p>loading pokemon data, please wait</p></div>);\r\n  if (error) return <p>Error loading pokemon data from graphQl, please refresh the page</p>;\r\n\r\n  const pokemonList = data.pokemons.results;\r\n  \r\n  var localPokemon = JSON.parse(localStorage.getItem(\"PokemonData\"));\r\n  localPokemon = localPokemon ? localPokemon : false;\r\n\r\n  var myPokemon = []\r\n  for(var i=0; i<pokemonList.length; i++){\r\n      var pokemonName = pokemonList[i].name;\r\n      var isOwn = localPokemon[pokemonName] ? localPokemon[pokemonName].length > 0 : false;\r\n\r\n      if(isOwn){\r\n          myPokemon.push(pokemonList[i]);\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Home-Container\">\r\n      <Row className=\"Home-Card-Row\">\r\n        <PokemonCard data={pokemonList} ownPokemon={localPokemon}/>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react';\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader, Row, Spinner } from 'reactstrap';\r\n\r\nimport PokemonCard from '../Components/PokemonCard';\r\n\r\nconst queryPokemonList = gql`\r\n  query pokemons($limit: Int, $offset: Int) {\r\n    pokemons(limit: $limit, offset: $offset) {\r\n      count\r\n      next\r\n      previous\r\n      status\r\n      message\r\n      results {\r\n        url\r\n        name\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst gqlVariables = {\r\n    limit: 151,\r\n    offset: 0,\r\n};\r\n\r\nconst MyPokemon = () => {\r\n    var localPokemon = JSON.parse(localStorage.getItem(\"PokemonData\"));\r\n    localPokemon = localPokemon ? localPokemon : false;\r\n\r\n    const [modalReleaseOpen, setModalReleaseOpen] = useState(false);\r\n    const [releasedPokemon, setReleasedPokemon] = useState([\"\", \"\"]);\r\n    const [ownPokemon, setOwnPokemon] = useState(localPokemon);\r\n\r\n    const toggleModalRelease = () => setModalReleaseOpen(!modalReleaseOpen);\r\n    \r\n    const releasePokemon = (pokemon, pokeName) => {\r\n        setReleasedPokemon([pokemon, pokeName]);\r\n        toggleModalRelease();\r\n    }\r\n\r\n    const deleteEntry = () => {\r\n        var pokemon = releasedPokemon[0];\r\n        var pokeName = releasedPokemon[1];\r\n\r\n        var cloneOwnPokemon = JSON.parse(JSON.stringify(ownPokemon));\r\n        cloneOwnPokemon[pokemon] = cloneOwnPokemon[pokemon].filter(name => name !== pokeName);\r\n\r\n        if(cloneOwnPokemon[pokemon].length == 0){\r\n            delete cloneOwnPokemon[pokemon];\r\n        }\r\n\r\n        if(Object.keys(cloneOwnPokemon).length == 0){\r\n            localStorage.removeItem(\"PokemonData\");\r\n            setOwnPokemon(false);\r\n        } else {\r\n            localStorage.setItem(\"PokemonData\", JSON.stringify(cloneOwnPokemon));\r\n            setOwnPokemon(cloneOwnPokemon);\r\n        }\r\n        \r\n        toggleModalRelease();\r\n    }\r\n\r\n    const { loading, error, data } = useQuery(queryPokemonList, {\r\n        variables: gqlVariables,\r\n    });\r\n\r\n    if (loading) return (<div><Spinner color=\"primary\" children=\"\"/><p>loading pokemon data, please wait</p></div>);\r\n    if (error) return <p>Error loading pokemon data from graphQl, please refresh the page</p>;\r\n\r\n    const pokemonList = data.pokemons.results;\r\n\r\n    var myPokemon = []\r\n    for(var i=0; i<pokemonList.length; i++){\r\n        var pokemonName = pokemonList[i].name;\r\n        var isOwn = ownPokemon[pokemonName] ? ownPokemon[pokemonName].length > 0 : false;\r\n        \r\n        if(isOwn){\r\n            myPokemon.push(pokemonList[i]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Home-Container\">\r\n            <h2>My Pokemon</h2>\r\n            {ownPokemon ?\r\n                <Row className=\"Home-Card-Row\">\r\n                    <PokemonCard \r\n                        data={myPokemon}\r\n                        ownPokemon={ownPokemon}\r\n                        showName={true}\r\n                        releasePokemon={releasePokemon}\r\n                    />\r\n                </Row>\r\n                :\r\n                <i>You dont have any pokemon at the moment, go catch some</i>\r\n            }\r\n            <Modal isOpen={modalReleaseOpen} toggle={toggleModalRelease} backdrop={\"static\"}>\r\n                <ModalHeader>Release</ModalHeader>\r\n                <ModalBody>\r\n                    <p>You are about to release <b>{releasedPokemon[1]}</b>, Proceed?</p>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\" onClick={deleteEntry}>Release</Button>\r\n                    <Button color=\"primary\" onClick={toggleModalRelease}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPokemon;","import React, { useState } from 'react';\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { useLocation, Redirect } from 'react-router-dom';\r\nimport { Button, Col, Modal, ModalBody, ModalFooter, ModalHeader, Row, Spinner, Table } from 'reactstrap';\r\n\r\nconst queryPokemon = gql`\r\n    query pokemon($name: String!) {\r\n        pokemon(name: $name) {\r\n            id\r\n            name\r\n            sprites {\r\n                front_default\r\n            }\r\n            moves {\r\n                move {\r\n                    name\r\n                }\r\n            }\r\n            types {\r\n                type {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst PokemonDetail = (props) => {\r\n    const location = useLocation();\r\n\r\n    const [modalCatchOpen, setModalCatchOpen] = useState(false);\r\n    const [modalFailedOpen, setModalFailedOpen] = useState(false);\r\n    const [caughtPokemon, setCaughtPokemon] = useState(\"\");\r\n    const [caughtName, setCaughtName] = useState(\"\");\r\n\r\n    const toggleModalCatch = () => setModalCatchOpen(!modalCatchOpen);\r\n    const toggleModalFailed = () => setModalFailedOpen(!modalFailedOpen);\r\n\r\n    const savePokemon = () => {\r\n        var localPokemon = localStorage.getItem(\"PokemonData\");\r\n        var pokemonObj = {};\r\n        var isUnique = true;\r\n\r\n        if (localPokemon) {\r\n            pokemonObj = JSON.parse(localPokemon);\r\n\r\n            if (!pokemonObj[caughtPokemon]) {\r\n                pokemonObj[caughtPokemon] = [];\r\n            }\r\n            \r\n            Object.values(pokemonObj).forEach(val => {if (val.includes(caughtName)) isUnique = false});\r\n\r\n            pokemonObj[caughtPokemon].push(caughtName);\r\n        } else {\r\n            pokemonObj = { [caughtPokemon]: [caughtName] };\r\n        }\r\n\r\n        if(isUnique){\r\n            localStorage.setItem(\"PokemonData\", JSON.stringify(pokemonObj));\r\n\r\n            setCaughtName(\"\");\r\n            toggleModalCatch();\r\n        } else {\r\n            alert(\"You already have a pokemon named: \" + caughtName + \"\\nPlease give it another name\");\r\n        }\r\n    }\r\n\r\n    if (!location.state) {\r\n        alert(\"No pokemon selected\");\r\n        return <Redirect to=\"/\" />\r\n    } else {\r\n        return (\r\n            <div className=\"Detail-Container\">\r\n                <h2>Pokemon Detail</h2>\r\n                <PokemonInfo\r\n                    pokemonName={location.state.pokemon}\r\n                    toggleModalCatch={toggleModalCatch}\r\n                    toggleModalFailed={toggleModalFailed}\r\n                    setCaughtPokemon={setCaughtPokemon}\r\n                />\r\n                <Modal isOpen={modalCatchOpen} toggle={toggleModalCatch} backdrop={\"static\"}>\r\n                    <ModalHeader>SUCCESS</ModalHeader>\r\n                    <ModalBody>\r\n                        <p>Congratulation, you catch <b>{caughtPokemon}</b></p>\r\n                        <p>Please give it a good name :)</p>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={caughtName}\r\n                            onChange={e => setCaughtName(e.target.value)}\r\n                        />\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={savePokemon}>Save</Button>{' '}\r\n                        <Button color=\"danger\" onClick={toggleModalCatch}>Release</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Modal isOpen={modalFailedOpen} toggle={toggleModalFailed} backdrop={\"static\"}>\r\n                    <ModalHeader>Failed</ModalHeader>\r\n                    <ModalBody>\r\n                        <p>Failed to catch <b>{caughtPokemon}</b></p>\r\n                        <p>Keep trying, dont give up!</p>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={toggleModalFailed}>Close</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst PokemonInfo = (props) => {\r\n    const gqlVariables = {\r\n        name: props.pokemonName,\r\n    };\r\n\r\n    const { loading, error, data } = useQuery(queryPokemon, {\r\n        variables: gqlVariables,\r\n    });\r\n\r\n    if (loading) return (<div><Spinner color=\"primary\" children=\"\"/><p>loading pokemon data, please wait</p></div>);\r\n    if (error) return <p>Error loading pokemon data from graphQl, please refresh the page</p>;\r\n\r\n    const pokemonData = data.pokemon;\r\n\r\n    const tryCatch = (pokemon) => {\r\n        var successCatch = Math.random() < 0.5;\r\n        props.setCaughtPokemon(pokemon);\r\n\r\n        if (successCatch) {\r\n            props.toggleModalCatch();\r\n        } else {\r\n            props.toggleModalFailed();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row className=\"Detail-Info\">\r\n            <Col xs=\"12\" sm=\"4\">\r\n                <div>\r\n                    <img src={pokemonData.sprites.front_default} alt=\"poke_img.png\" />\r\n                </div>\r\n                <div className=\"mb-2\">\r\n                    <Button color=\"success\" onClick={() => tryCatch(pokemonData.name)}>Catch this pokemon!</Button>\r\n                </div>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"8\">\r\n                <div className=\"Detail-Info-Box\">\r\n                    <Row>\r\n                        <b>{pokemonData.name}</b>\r\n                    </Row>\r\n                    <Row className=\"mb-2\">\r\n                        {\r\n                            pokemonData.types.map((e, i) => {\r\n                                return (\r\n                                    <Col key={\"poke_type_\" + i} className=\"d-flex justify-content-center\">\r\n                                        <div className={\"align-middle Detail-Type-Box \" + e.type.name}>\r\n                                            {e.type.name}\r\n                                        </div>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                    <Row>\r\n                        <div className=\"Detail-Table-Move\">\r\n                            <Table striped>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th colSpan=\"2\">Move Set</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        pokemonData.moves.map((e, i) => {\r\n                                            if (i == 0 || i % 2 == 0) {\r\n                                                if (pokemonData.moves[i + 1]) {\r\n                                                    return (\r\n                                                        <tr key={\"poke_move_\" + i}>\r\n                                                            <td>{pokemonData.moves[i].move.name}</td>\r\n                                                            <td>{pokemonData.moves[i + 1].move.name}</td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                } else {\r\n                                                    return (\r\n                                                        <tr key={\"poke_move_\" + i}>\r\n                                                            <td colSpan=\"2\">{pokemonData.moves[i].move.name}</td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    </Row>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default PokemonDetail;","export default __webpack_public_path__ + \"static/media/pokeball.de24102c.png\";","import React, { useState } from 'react';\r\nimport { Collapse, Nav, Navbar, NavbarToggler, NavbarBrand, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport pokeball from \"../Assets/pokeball.png\"\r\n\r\nconst NavbarLayout = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    const closeNavbar = () => setIsOpen(false);\r\n\r\n    var homeHref = window.location.hostname == \"rolliprabu.github.io\" ? \"/pokemon-lite\" : \"/\"\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"secondary\" light expand=\"md\" className=\"Navbar-container\">\r\n                <NavbarBrand href={homeHref} className=\"d-flex flex-row\">\r\n                    <img src={pokeball} alt=\"Pokemon\" className=\"App-Brand\" />\r\n                    <div className=\"App-Brand-Text align-middle h-100\">Pokemon</div>\r\n                </NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar className=\"d-sm-inline-flex flex-sm-row-reverse\">\r\n                    <Nav className=\"mr-auto\" navbar>\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to=\"/\" onClick={closeNavbar} className=\"Navbar-text\">Pokemon List</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to=\"/mypokemon\" onClick={closeNavbar} className=\"Navbar-text\">My Pokemon</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavbarLayout;","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Home from \"./Components/Home\";\nimport MyPokemon from \"./Components/MyPokemon\";\nimport PokemonDetail from \"./Components/PokemonDetail\";\nimport NavbarLayout from \"./Components/Navbar\";\n\nimport './Styles/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavbarLayout />\n        <div className=\"Main-Container\">\n          <Switch>\n            <Route path=\"/detail\">\n              <PokemonDetail />\n            </Route>\n            <Route path=\"/mypokemon\">\n              <MyPokemon />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './Styles/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokeapi.graphcdn.app/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}